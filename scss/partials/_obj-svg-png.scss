%svgfallbackPositioning {
	position: absolute;
	top: 0; bottom: 0;
	left: 0; right: 0;
	margin: auto;  
	display: block;
	width: 500px;
	height: 500px;	
	// text-align: left; 		//override default text-align center that was applied to <html>
	// text-indent: 1000px;		//move the YourBrowserDoesNotSupportSVG text out of box
	overflow: hidden;		//hide the text and rest of sprite	
}
//png fallback images in backgrounds
%cakefallback {
	background: url(../img/cake500.png) no-repeat top left;
}
%balloonsfallback {
	background: url(../img/balloons.png) no-repeat top left;
}
%bannerfallback {
	background: url(../img/banner.png) no-repeat top left;
}
//if javascript is enabled, the bday_animate_with_fallbacks.js has imageFallback(), 
//	imageFallback() replaces the .obsvg class with .svgfallback when svg is not supported, 
//	and/or (for #cake_obj, when SMIL is not supported )
//	.svgfallback&objectID contains a background with the png fallback inside
.svgfallback {
	&#cake_obj {
		@extend %svgfallbackPositioning;
		@extend %cakefallback;
	}
	&#balloons_obj {
		@extend %svgfallbackPositioning;
		@extend %balloonsfallback;
	}
	&#banner_obj {
		@extend %svgfallbackPositioning;
		@extend %bannerfallback;
	}
}
// if js is supported, and the objects still have .obsvg, that means that svg is supported, so the object can be scaled
.js .obsvg {
	width: 100%;
	height: 100%;
}

// if js is not enabled, assume that svg is not supported (to cover all bases),
// serve png fallbacks while hiding objects with svg, just incase svg is available
.no-js {
	#cake_obj,
	#balloons_obj,
	#banner_obj {
		display: none;
	}
	#cake_fallback {
		@extend %svgfallbackPositioning;
		@extend %cakefallback;
	}
	#balloons_fallback {
		@extend %svgfallbackPositioning;
		@extend %balloonsfallback;
	}
	#banner_fallback {
		@extend %svgfallbackPositioning;
		@extend %bannerfallback;
	}
}
// if javascript is enabled, hid the fallback divs
.js {
	#cake_fallback,
	#balloons_fallback,
	#banner_fallback {
		display: none;
	}
}